import sklearn
import pandas as pd
import random
from sklearn import datasets
import math

from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

data = pd.read_csv('mushroom.tsv', sep='\t')


#Create K folds
K = 5
number_of_entries = data.shape[0]
number_of_entries_edible = data[data['target'] == 0].shape[0]
number_of_entries_poisonous = data[data['target'] == 1].shape[0]

estrat = number_of_entries_poisonous / number_of_entries

instancias_por_fold = number_of_entries / K
instancias_por_fold_poison = math.floor(number_of_entries_poisonous / K)
instancias_por_fold_edible = math.floor(number_of_entries_edible / K)

fold_dataframes = {}

for i in range(1,K):
    fold_df_poison = data[data['target'] == 1].sample(instancias_por_fold_poison)
    fold_df_edible = data[data['target'] == 0].sample(instancias_por_fold_edible)
    fold_df = pd.concat([fold_df_poison, fold_df_edible])
    data = data.drop(fold_df.index)
    fold_dataframes[i] = fold_df
    
fold_dataframes[K] = data

#Train KNN
KNN = KNeighborsClassifier(n_neighbors=51)
train_data = pd.concat([fold_dataframes[2], fold_dataframes[3], fold_dataframes[4], fold_dataframes[5]])

features = train_data.columns[1:-1]
X = train_data.loc[:, features]
y = train_data.target

KNN.fit(X, y)

test_data = fold_dataframes[1].loc[:, features]
predictions = KNN.predict(test_data)
truth_val = fold_dataframes[1].loc[:, 'target'].tolist()

vp = 0
fp = 0
vn = 0
fn = 0
for i in range(0, test_data.shape[0]):
    if predictions[i] == 0 and predictions[i] == truth_val[i]:
        vp += 1
    elif predictions[i] == 0 and predictions[i] != truth_val[i]:
        fp += 1
    elif predictions[i] == 1 and predictions[i] == truth_val[i]:
        vn += 1
    else:
        fn += 1

[vp, fp, vn, fn]

#Train randomized forest
RFC = RandomForestClassifier(max_depth=10, random_state=0)
train_data = pd.concat([fold_dataframes[2], fold_dataframes[3], fold_dataframes[4], fold_dataframes[5]])

features = train_data.columns[1:-1]
X = train_data.loc[:, features]
y = train_data.target

RFC.fit(X, y)

test_data = fold_dataframes[1].loc[:, features]
predictions = RFC.predict(test_data)
truth_val = fold_dataframes[1].loc[:, 'target'].tolist()

vp = 0
fp = 0
vn = 0
fn = 0
for i in range(0, test_data.shape[0]):
    if predictions[i] == 0 and predictions[i] == truth_val[i]:
        vp += 1
    elif predictions[i] == 0 and predictions[i] != truth_val[i]:
        fp += 1
    elif predictions[i] == 1 and predictions[i] == truth_val[i]:
        vn += 1
    else:
        fn += 1

[vp, fp, vn, fn]

#Escolher 3o algoritmo